name: Integration Tests

on: [push, pull_request]

env:
  TEST_BROWSER_HEADLESS: 1
  CI: 1
  PLUGIN_NAME: opensearch-security
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: admin

jobs:
  tests:
    name: Run integration tests
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest , windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set env
        run: |
          opensearch_version=$(node -p "require('./package.json').opensearchDashboards.version")
          plugin_version=$(node -p "require('./package.json').version")
          echo "OPENSEARCH_VERSION=$opensearch_version" >> $GITHUB_ENV
          echo "PLUGIN_VERSION=$plugin_version" >> $GITHUB_ENV
        shell: bash

      - uses: browser-actions/setup-geckodriver@v0.0.0
      - run: geckodriver --version

      - name: Set up Firefox browser
        if: ${{ runner.os == 'Linux' }}
        uses: browser-actions/setup-firefox@v1

      - run: firefox --version
        if: ${{ runner.os == 'Linux' }}

      # Browser-action version does not work on Windows
      - name: Set up Firefox browser for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: RyanL1997/setup-browser@main
        with:
          browser: firefox
          version: latest

      - name: Download security plugin and create setup scripts
        uses: ./.github/actions/download-plugin
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugin-name: ${{ env.PLUGIN_NAME }}
          plugin-version: ${{ env.PLUGIN_VERSION }}

      - name: Create remote OpenSearch Config
        run: | 
          cat << 'EOT' > remote_opensearch.yml
          http.port: 9202
          plugins.security.ssl.transport.pemcert_filepath: esnode.pem
          plugins.security.ssl.transport.pemkey_filepath: esnode-key.pem
          plugins.security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
          plugins.security.ssl.transport.enforce_hostname_verification: false
          plugins.security.ssl.http.pemcert_filepath: esnode.pem
          plugins.security.ssl.http.pemkey_filepath: esnode-key.pem
          plugins.security.ssl.http.pemtrustedcas_filepath: root-ca.pem
          plugins.security.allow_unsafe_democertificates: true
          plugins.security.allow_default_init_securityindex: true
          plugins.security.authcz.admin_dn:
            - 'CN=A,OU=UNIT,O=ORG,L=TORONTO,ST=ONTARIO,C=CA'
          plugins.security.nodes_dn:
            - 'CN=node1.dns.a-record,OU=UNIT,O=ORG,L=TORONTO,ST=ONTARIO,C=CA'
            - 'CN=node2.dns.a-record,OU=UNIT,O=ORG,L=TORONTO,ST=ONTARIO,C=CA'
          plugins.security.audit.type: internal_opensearch
          plugins.security.enable_snapshot_restore_privilege: true
          plugins.security.check_snapshot_restore_write_privileges: true
          # TODO: change this back to true/just append to the created opensearch.yml the new port
          # after the self-signed certs issue is fixed
          plugins.security.ssl.http.enabled: false 
          plugins.security.restapi.roles_enabled: [all_access, security_rest_api_access]
          plugins.security.system_indices.enabled: true
          plugins.security.system_indices.indices: [.plugins-ml-config, .plugins-ml-connector,
            .plugins-ml-model-group, .plugins-ml-model, .plugins-ml-task, .plugins-ml-conversation-meta,
            .plugins-ml-conversation-interactions, .plugins-ml-memory-meta, .plugins-ml-memory-message,
            .opendistro-alerting-config, .opendistro-alerting-alert*, .opendistro-anomaly-results*,
            .opendistro-anomaly-detector*, .opendistro-anomaly-checkpoints, .opendistro-anomaly-detection-state,
            .opendistro-reports-*, .opensearch-notifications-*, .opensearch-notebooks, .opensearch-observability,
            .ql-datasources, .opendistro-asynchronous-search-response*, .replication-metadata-store,
            .opensearch-knn-models, .geospatial-ip2geo-data*, .plugins-flow-framework-config,
            .plugins-flow-framework-templates, .plugins-flow-framework-state]
          node.max_local_storage_nodes: 3
          EOT
        shell: bash
      
      - name: Run Opensearch with A Single Plugin
        uses: derek-ho/start-opensearch@9202
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugins: "file:$(pwd)/opensearch-security.zip"
          security-enabled: true
          admin-password: ${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}
          security_config_file: ${{ inputs.security_config_file }}
          opensearch_yml_file: remote_opensearch.yml
          opensearch_port: 9202

      - name: Check OpenSearch is running
          # Verify that the server is operational
        run: |
          curl http://localhost:9202/_cat/plugins -v -u admin:myStrongPassword123!
        shell: bash

      - name: Run Opensearch with security
        uses: derek-ho/start-opensearch@v2
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
          plugins: "file:$(pwd)/${{ env.PLUGIN_NAME }}.zip"
          security-enabled: true
          admin-password: ${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}

      # https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
      - name: Remove unnecessary files Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - id: install-dashboards
        uses: derek-ho/setup-opensearch-dashboards@v1
        with:
          plugin_name: security-dashboards-plugin

      - name: Start Dashboards in background
        run: node scripts/build_opensearch_dashboards_platform_plugins.js
        working-directory: ${{ steps.install-dashboards.outputs.dashboards-directory }}

      - name: Yarn cache clean
        run: yarn cache clean

      - name: Run integration tests on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "check if opensearch is ready"
          curl -XGET https://localhost:9200 -u 'admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}' -k
          yarn test:jest_server --coverage
        working-directory: ${{ steps.install-dashboards.outputs.plugin-directory }}

      - name: Run integration tests on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "check if opensearch is ready"
          curl -XGET https://localhost:9200 -u 'admin:${{ env.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}' -k
          node .\test\run_jest_tests.js --runInBand --detectOpenHandles --forceExit --config .\test\jest.config.server.js
        working-directory: ${{ steps.install-dashboards.outputs.plugin-directory }}
